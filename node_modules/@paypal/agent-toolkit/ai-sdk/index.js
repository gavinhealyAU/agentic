"use strict";var bt=Object.create;var x=Object.defineProperty;var Pt=Object.getOwnPropertyDescriptor;var _t=Object.getOwnPropertyNames;var vt=Object.getPrototypeOf,xt=Object.prototype.hasOwnProperty;var St=(e,n)=>{for(var i in n)x(e,i,{get:n[i],enumerable:!0})},q=(e,n,i,a)=>{if(n&&typeof n=="object"||typeof n=="function")for(let o of _t(n))!xt.call(e,o)&&o!==i&&x(e,o,{get:()=>n[o],enumerable:!(a=Pt(n,o))||a.enumerable});return e};var v=(e,n,i)=>(i=e!=null?bt(vt(e)):{},q(n||!e||!e.__esModule?x(i,"default",{value:e,enumerable:!0}):i,e)),It=e=>q(x({},"__esModule",{value:!0}),e);var zt={};St(zt,{ALL_TOOLS_ENABLED:()=>mt,PayPalAgentToolkit:()=>C,PayPalWorkflows:()=>yt});module.exports=It(zt);var u=v(require("axios"));var y=require("mathjs"),j=require("lodash");function N(e){try{let n=e.currencyCode,i=[],a=e.items.reduce((g,P)=>g+P.itemCost*P.quantity,0),o=e.shippingCost||0,s=e.items.reduce((g,P)=>g+P.itemCost*P.taxPercent*P.quantity/100,0),c=e.discount||0,d=a+s+o-c,p={item_total:{value:(0,y.round)(a,2).toString(),currency_code:n},shipping:{value:(0,y.round)(o,2).toString(),currency_code:n},tax_total:{value:(0,y.round)(s,2).toString(),currency_code:n},discount:{value:(0,y.round)(c,2).toString(),currency_code:n}};e.items.forEach(g=>{i.push({name:g.name,description:g.description,unit_amount:{value:g.itemCost.toString()||"0",currency_code:n},quantity:g.quantity.toString()||"1",tax:{value:(0,y.round)(g.itemCost*g.taxPercent/100,2).toString()||"0",currency_code:n}})});let l={amount:{value:(0,y.round)(d,2).toString(),currency_code:n,breakdown:p},items:i},_={intent:"CAPTURE",purchase_units:[e.shippingAddress?{...l,shipping:{address:e.shippingAddress}}:l]};return(e.returnUrl||e.cancelUrl)&&(_.payment_source={paypal:{experience_context:{return_url:e.returnUrl,cancel_url:e.cancelUrl}}}),_}catch(n){throw console.error(n),new Error("Failed to parse order details")}}function S(e){return Object.entries(e).filter(([n,i])=>i!=null).map(([n,i])=>`${encodeURIComponent(n)}=${encodeURIComponent(String(i))}`).join("&")}var L=v(require("debug")),r=(0,L.default)("agent-toolkit:functions");async function H(e,n,i){r("[createInvoice] Starting invoice creation process"),r(`[createInvoice] Context: ${JSON.stringify({sandbox:n.sandbox,merchant_id:n.merchant_id})}`),r(`[createInvoice] Invoice detail: ${JSON.stringify(i)}`);let a=await e.getHeaders();r("[createInvoice] Headers obtained");let o=`${e.getBaseUrl()}/v2/invoicing/invoices`;r(`[createInvoice] API URL: ${o}`);try{r("[createInvoice] Sending request to PayPal API");let s=await u.default.post(o,i,{headers:a});if(r(`[createInvoice] Invoice created successfully. Status: ${s.status}`),s.data&&s.data.rel==="self"&&s.data.href&&s.data.href.includes("/v2/invoicing/invoices/")&&s.data.method==="GET"){let c=s.data.href.split("/"),d=c[c.length-1];r(`[createInvoice] Invoice ID extracted from href: ${d}`),r("[createInvoice] Automatically sending invoice with thank you note");try{let p=await w(e,n,{invoice_id:d,note:"thank you for choosing us. If there are any issues, feel free to contact us",send_to_recipient:!0});return r(`[createInvoice] Auto-send invoice result: ${JSON.stringify(p)}`),{createResult:s.data,sendResult:p}}catch(p){return r("[createInvoice] Error in auto-send invoice:",p.message),s.data}}else return r(`[createInvoice] Invoice ID: ${s.data.id||"N/A"}`),s.data}catch(s){r("[createInvoice] Error creating invoice:",s.message),m(s)}}async function B(e,n,i){r("[listInvoices] Starting to list invoices"),r(`[listInvoices] Context: ${JSON.stringify({sandbox:n.sandbox,merchant_id:n.merchant_id})}`),r(`[listInvoices] Query parameters: ${JSON.stringify(i)}`);let a=await e.getHeaders();r("[listInvoices] Headers obtained");let o=`${e.getBaseUrl()}/v2/invoicing/invoices`;r(`[listInvoices] API URL: ${o}`);try{r("[listInvoices] Sending request to PayPal API");let s=await u.default.get(o,{headers:a,params:i});return r(`[listInvoices] Invoices retrieved successfully. Status: ${s.status}`),s.data.total_items!==void 0&&r(`[listInvoices] Total items: ${s.data.total_items}`),s.data.items&&Array.isArray(s.data.items)&&r(`[listInvoices] Retrieved ${s.data.items.length} invoices`),s.data}catch(s){r("[listInvoices] Error listing invoices:",s.message),m(s)}}async function J(e,n,i){r("[getInvoice] Starting to get invoice"),r(`[getInvoice] Context: ${JSON.stringify({sandbox:n.sandbox,merchant_id:n.merchant_id})}`),r(`[getInvoice] Query parameters: ${JSON.stringify(i)}`);let a=await e.getHeaders();r("[getInvoice] Headers obtained");let o=`${e.getBaseUrl()}/v2/invoicing/invoices/${i.invoice_id}`;r(`[getInvoice] API URL: ${o}`);try{r("[getInvoice] Sending request to PayPal API");let s=await u.default.get(o,{headers:a});return r(`[getInvoice] Invoice retrieved successfully. Status: ${s.status}`),s.data}catch(s){r("[getInvoice] Error getting invoice:",s.message),m(s)}}async function w(e,n,i){r("[sendInvoice] Starting to send invoice"),r(`[sendInvoice] Context: ${JSON.stringify({sandbox:n.sandbox,merchant_id:n.merchant_id})}`);let{invoice_id:a,note:o,send_to_recipient:s,additional_recipients:c}=i;r(`[sendInvoice] Invoice ID: ${a}`),o&&r(`[sendInvoice] Note: ${o}`),r(`[sendInvoice] Send to recipient: ${s}`),c&&c.length>0&&r(`[sendInvoice] Additional recipients: ${c.join(", ")}`);let d=await e.getHeaders();r("[sendInvoice] Headers obtained");let p=`${e.getBaseUrl()}/v2/invoicing/invoices/${a}/send`;r(`[sendInvoice] API URL: ${p}`);try{r("[sendInvoice] Sending request to PayPal API");let l=await u.default.post(p,i,{headers:d});return r(`[sendInvoice] Invoice sent successfully. Status: ${l.status}`),l.data}catch(l){r("[sendInvoice] Error sending invoice:",l.message),m(l)}}async function Q(e,n,i){r("[sendInvoiceReminder] Starting to send invoice reminder"),r(`[sendInvoiceReminder] Context: ${JSON.stringify({sandbox:n.sandbox,merchant_id:n.merchant_id})}`);let{invoice_id:a,note:o,subject:s,additional_recipients:c}=i;r(`[sendInvoiceReminder] Invoice ID: ${a}`),s&&r(`[sendInvoiceReminder] Subject: ${s}`),o&&r(`[sendInvoiceReminder] Note: ${o}`),c&&c.length>0&&r(`[sendInvoiceReminder] Additional recipients: ${c.join(", ")}`);let d=await e.getHeaders();r("[sendInvoiceReminder] Headers obtained");let p=`${e.getBaseUrl()}/v2/invoicing/invoices/${a}/remind`;r(`[sendInvoiceReminder] API URL: ${p}`),r(`[sendInvoiceReminder] Request params: ${JSON.stringify(i)}`);try{r("[sendInvoiceReminder] Sending request to PayPal API");let l=await u.default.post(p,i,{headers:d});return r(`[sendInvoiceReminder] Invoice reminder sent successfully. Status: ${l.status}`),l.data}catch(l){r("[sendInvoiceReminder] Error sending invoice reminder:",l.message),m(l)}}async function z(e,n,i){r("[cancelSentInvoice] Starting to cancel sent invoice"),r(`[cancelSentInvoice] Context: ${JSON.stringify({sandbox:n.sandbox,merchant_id:n.merchant_id})}`);let{invoice_id:a,note:o,send_to_recipient:s,additional_recipients:c}=i;r(`[cancelSentInvoice] Invoice ID: ${a}`),o&&r(`[cancelSentInvoice] Note: ${o}`),r(`[cancelSentInvoice] Send to recipient: ${s}`),c&&c.length>0&&r(`[cancelSentInvoice] Additional recipients: ${c.join(", ")}`);let d=await e.getHeaders();r("[cancelSentInvoice] Headers obtained");let p=`${e.getBaseUrl()}/v2/invoicing/invoices/${a}/cancel`;r(`[cancelSentInvoice] API URL: ${p}`),r(`[cancelSentInvoice] Request params: ${JSON.stringify(i)}`);try{r("[cancelSentInvoice] Sending request to PayPal API");let l=await u.default.post(p,i,{headers:d});return l.status===204?(r(`[cancelSentInvoice] Invoice cancelled successfully. Status: ${l.status}`),{success:!0,invoice_id:a}):(r(`[cancelSentInvoice] Invoice cancellation response received. Status: ${l.status}`),l.data)}catch(l){r("[cancelSentInvoice] Error cancelling invoice:",l.message),m(l)}}async function G(e,n,i){let{invoice_id:a}=i,o={width:i.width,height:i.height},s=`${e.getBaseUrl()}/v2/invoicing/invoices/${a}/generate-qr-code`,c=await e.getHeaders();r("[generateInvoiceQrCodePrompt] Headers obtained");try{r("[cancelSentInvoice] Sending request to PayPal API");let d=await u.default.post(s,o,{headers:c});return d.status===204?(r(`[cancelSentInvoice] Invoice cancelled successfully. Status: ${d.status}`),{success:!0,invoice_id:a}):(r(`[cancelSentInvoice] Invoice cancellation response received. Status: ${d.status}`),d.data)}catch(d){r("[cancelSentInvoice] Error cancelling invoice:",d.message),m(d)}}async function M(e,n,i){let a=await e.getHeaders(),o=`${e.getBaseUrl()}/v1/catalogs/products`;r(`[createProduct] Payload: ${JSON.stringify(i,null,2)}`);try{return(await u.default.post(o,i,{headers:a})).data}catch(s){throw console.error("Error Creating Product:",s.response?.data||s),s}}async function V(e,n,i){let a=await e.getHeaders(),{page:o=1,page_size:s=2,total_required:c=!0}=i,d=`${e.getBaseUrl()}/v1/catalogs/products?page_size=${s}&page=${o}&total_required=${c}`;try{return(await u.default.get(d,{headers:a})).data}catch(p){throw console.error("Error Listing Product:",p.response?.data||p),p}}async function Y(e,n,i){let a=await e.getHeaders(),o=`${e.getBaseUrl()}/v1/catalogs/products/${i.product_id}`;try{return(await u.default.get(o,{headers:a})).data}catch(s){throw console.error("Error Show Product Details:",s.response?.data||s),s}}async function F(e,n,i){let a=await e.getHeaders(),o=`${e.getBaseUrl()}/v1/billing/plans`;r(`[createSubscriptionPlan] Payload: ${JSON.stringify(i,null,2)}`);try{return(await u.default.post(o,i,{headers:a})).data}catch(s){throw console.error("Error Creating Plan:",s.response?.data||s),s}}async function K(e,n,i){let{page:a=1,page_size:o=10,total_required:s=!0,product_id:c}=i,d=`${e.getBaseUrl()}/v1/billing/plans?page_size=${o}&page=${a}&total_required=${s}`;c&&(d+=`&product_id=${c}`);let p=await e.getHeaders();try{return(await u.default.get(d,{headers:p})).data}catch(l){throw console.error("Error Creating Plan:",l.response?.data||l),l}}async function W(e,n,i){let a=await e.getHeaders(),o=`${e.getBaseUrl()}/v1/billing/plans/${i.plan_id}`;try{return(await u.default.get(o,{headers:a})).data}catch(s){throw console.error("Error Show Plan Details:",s.response?.data||s),s}}async function Z(e,n,i){let a=await e.getHeaders(),o=`${e.getBaseUrl()}/v1/billing/subscriptions`;r(`[createSubscription] Payload: ${JSON.stringify(i,null,2)}`);try{return(await u.default.post(o,i,{headers:a})).data}catch(s){throw console.error("Error Creating Subscription:",s.response?.data||s),s}}async function X(e,n,i){let a=await e.getHeaders(),{subscription_id:o}=i,s=`${e.getBaseUrl()}/v1/billing/subscriptions/${o}`;try{return(await u.default.get(s,{headers:a})).data}catch(c){throw console.error("Error Show Subscription Details:",c.response?.data||c),c}}async function ee(e,n,i){let a=await e.getHeaders(),{subscription_id:o,payload:s}=i,c=`${e.getBaseUrl()}/v1/billing/subscriptions/${o}/cancel`;r(`[cancelSubscription] Payload: ${JSON.stringify(i,null,3)}`);try{return(await u.default.post(c,s,{headers:a})).data}catch(d){throw console.error("Error Creating Subscription:",d.response?.data||d),d}}var te=async(e,n,i)=>{r("[createOrder] Starting order creation process"),r(`[createOrder] Context: ${JSON.stringify({sandbox:n.sandbox,merchant_id:n.merchant_id})}`),r(`[createOrder] Order details: ${JSON.stringify(i)}`);let a=await e.getHeaders(),o=`${e.getBaseUrl()}/v2/checkout/orders`,s=N(i);try{r(`[createOrder] Request body: ${JSON.stringify(s)}`);let c=await u.default.post(o,s,{headers:a});return r(`[createOrder] Order created successfully. Status: ${c.status}`),c.data}catch(c){r("[createOrder] Error creating order:",c.message),m(c)}},D=async(e,n,i)=>{r("[getOrder] Starting order retrieval process"),r(`[getOrder] Context: ${JSON.stringify({sandbox:n.sandbox,merchant_id:n.merchant_id})}`),r(`[getOrder] Order ID: ${i.id}`);let a=await e.getHeaders();r("[getOrder] Headers obtained");let o=`${e.getBaseUrl()}/v2/checkout/orders/${i.id}`;r(`[getOrder] API URL: ${o}`);try{r("[getOrder] Sending GET request to PayPal API");let s=await u.default.get(o,{headers:a});return r(`[getOrder] Order retrieved successfully. Status: ${s.status}`),s.data}catch(s){r("[getOrder] Error retrieving order:",s.message),m(s)}},re=async(e,n,i)=>{try{r(`[captureOrder] Starting order capture process with params: ${JSON.stringify(i)}`);let a=`${e.getBaseUrl()}/v2/checkout/orders/${i.id}/capture`,o=await u.default.post(a,{},{headers:await e.getHeaders()});return r("[captureOrder] Response %s",o),o.status<=299?{status:"success",response:o.data}:{status:"error",response:o.data}}catch(a){throw console.error(a),new Error("Failed to capture order")}};async function ie(e,n,i){r("[createShipment] Starting shipment tracking creation process"),r(`[createShipment] Context: ${JSON.stringify({sandbox:n.sandbox,merchant_id:n.merchant_id})}`);let{tracking_number:a,transaction_id:o,status:s,carrier:c}=i;r(`[createShipment] Tracker details: tracking_number=${a}, transaction_id=${o}, status=${s}, carrier=${c}`);let d=await e.getHeaders();r("[createShipment] Headers obtained");let p=`${e.getBaseUrl()}/v1/shipping/trackers-batch`;r(`[createShipment] API URL: ${p}`);let l={trackers:[{tracking_number:a,transaction_id:o,status:s,carrier:c}]};r(`[createShipment] Trackers params: ${JSON.stringify(l)}`);try{r("[createShipment] Sending request to PayPal API");let h=await u.default.post(p,l,{headers:d});return r(`[createShipment] Shipment tracking created successfully. Status: ${h.status}`),h.data}catch(h){r("[createShipment] Error creating shipment tracking:",h.message),m(h)}}async function ne(e,n,i){r("[getShipmentTracking] Starting to get shipment tracking information"),r(`[getShipmentTracking] Context: ${JSON.stringify({sandbox:n.sandbox,merchant_id:n.merchant_id})}`);let{transaction_id:a,order_id:o}=i;r(`[getShipmentTracking] Tracking details: transaction_id=${a}, order_id=${o}`);let s=await e.getHeaders();r("[getShipmentTracking] Headers obtained");let c=a;if(o&&!a){r("[getShipmentTracking] order_id provided but transaction_id is missing. Attempting to extract transaction_id from order details.");try{let p=await D(e,n,{id:o});if(p&&p.purchase_units&&p.purchase_units.length>0){let l=p.purchase_units[0];if(l.payments&&l.payments.captures&&l.payments.captures.length>0)c=l.payments.captures[0].id,r(`[getShipmentTracking] transaction_id extracted from order details: ${c}`);else throw new Error("Could not find capture id in the purchase unit details.")}else throw new Error("Could not find purchase unit details in order details.")}catch(p){throw r(`[getShipmentTracking] Error extracting transaction_id from order details: ${p.message}`),new Error(`Error extracting transaction_id from order details: ${p.message}`)}}else if(!a)throw new Error("Either transaction_id or order_id must be provided.");let d=`${e.getBaseUrl()}/v1/shipping/trackers?transaction_id=${c}`;r(`[getShipmentTracking] API URL: ${d}`);try{r("[getShipmentTracking] Sending request to PayPal API");let p=await u.default.get(d,{headers:s});return r(`[getShipmentTracking] Shipment tracking retrieved successfully. Status: ${p.status}`),p.data}catch(p){r("[getShipmentTracking] Error retrieving shipment tracking:",p.message),m(p)}}async function se(e,n,i){r("[listDisputes] Starting to list disputes"),r(`[listDisputes] Context: ${JSON.stringify({sandbox:n.sandbox,merchant_id:n.merchant_id})}`);let a=await e.getHeaders();r("[listDisputes] Headers obtained");let o=`${e.getBaseUrl()}/v1/customer/disputes?${S(i)}`;r(`[listDisputes] API URL: ${o}`);try{r("[listDisputes] Sending request to PayPal API");let s=await u.default.get(o,{headers:a,params:i});return r(`[listDisputes] Disputes retrieved successfully. Status: ${s.status}`),s.data}catch(s){r("[listDisputes] Error listing disputes:",s.message),m(s)}}async function oe(e,n,i){r(`[getDispute] Starting to get dispute details for ID: ${i.dispute_id}`),r(`[getDispute] Context: ${JSON.stringify({sandbox:n.sandbox,merchant_id:n.merchant_id})}`);let{dispute_id:a}=i,o=await e.getHeaders();r("[getDispute] Headers obtained");let s=`${e.getBaseUrl()}/v1/customer/disputes/${a}`;r(`[getDispute] API URL: ${s}`);try{r("[getDispute] Sending request to PayPal API");let c=await u.default.get(s,{headers:o});return r(`[getDispute] Dispute details retrieved successfully. Status: ${c.status}`),c.data}catch(c){r(`[getDispute] Error retrieving dispute details for ID: ${a}:`,c.message),m(c)}}async function ae(e,n,i){r("[acceptClaim] Starting to list disputes"),r(`[acceptClaim] Context: ${JSON.stringify({sandbox:n.sandbox,merchant_id:n.merchant_id})}`);let a=await e.getHeaders();r("[acceptClaim] Headers obtained");let o=`${e.getBaseUrl()}/v1/customer/disputes/${i.dispute_id}/accept-claim`;r(`[acceptClaim] API URL: ${o}`);try{r("[acceptClaim] Sending request to PayPal API");let s=await u.default.post(o,{note:i.note},{headers:a,params:i});return r(`[acceptClaim] Disputes retrieved successfully. Status: ${s.status}`),s.data}catch(s){r("[acceptClaim] Error listing disputes:",s.message),m(s)}}async function ce(e,n,i){r("[listTransactions] Starting to list transactions"),r(`[listTransactions] Context: ${JSON.stringify({sandbox:n.sandbox,merchant_id:n.merchant_id})}`);let a=await e.getHeaders();if(r("[listTransactions] Headers obtained"),i.transaction_id){r(`[listTransactions] Searching for transaction with ID: ${i.transaction_id}`);let o=i.search_months||12;r(`[listTransactions] Will search up to ${o} months back for the transaction`);let s=new Date,c=new Date;c.setDate(s.getDate()-31);for(let d=0;d<o;d++){let p={...i};delete p.search_months,p.end_date=s.toISOString(),p.start_date=c.toISOString(),r(`[listTransactions] Searching month ${d+1}: ${c.toISOString()} to ${s.toISOString()}`);let l=`${e.getBaseUrl()}/v1/reporting/transactions?${S(p)}`;r(`[listTransactions] API URL: ${l}`);try{r("[listTransactions] Sending request to PayPal API");let h=await u.default.get(l,{headers:a,params:p});if(r(`[listTransactions] Transactions retrieved successfully. Status: ${h.status}`),h.data&&h.data.transaction_details&&h.data.transaction_details.length>0){let _=h.data.transaction_details.find(g=>g.transaction_info.transaction_id===i.transaction_id);if(_)return r(`[listTransactions] Found transaction with ID: ${i.transaction_id}`),{found:!0,transaction_details:[_],total_items:1}}s.setTime(c.getTime()),c.setMonth(c.getMonth()-1)}catch(h){r(`[listTransactions] Error searching transactions for month ${d+1}:`,h.message)}}return r(`[listTransactions] Transaction with ID ${i.transaction_id} not found after searching ${o} months`),{found:!1,transaction_details:[],total_items:0,message:`The transaction ID ${i.transaction_id} was not found in the last ${o} months. Please verify the transaction ID and try again, or let me know if there's anything else I can assist you with!`}}else{let o={...i};if(delete o.search_months,!o.end_date&&!o.start_date)o.end_date=new Date().toISOString(),o.start_date=new Date(new Date().getTime()-31*24*60*60*1e3).toISOString();else if(o.end_date)if(o.start_date){let c=new Date(o.start_date),d=new Date(o.end_date);(d.getTime()-c.getTime())/(24*60*60*1e3)>31&&(o.start_date=new Date(d.getTime()-31*24*60*60*1e3).toISOString())}else{let c=new Date(o.end_date);o.start_date=new Date(c.getTime()-31*24*60*60*1e3).toISOString()}else{let c=new Date(o.start_date);o.end_date=new Date(c.getTime()+31*24*60*60*1e3).toISOString()}let s=`${e.getBaseUrl()}/v1/reporting/transactions?${S(o)}`;r(`[listTransactions] API URL: ${s}`);try{r("[listTransactions] Sending request to PayPal API");let c=await u.default.get(s,{headers:a,params:o});return r(`[listTransactions] Transactions retrieved successfully. Status: ${c.status}`),c.data}catch(c){r("[listTransactions] Error listing transactions:",c.message),m(c)}}}function m(e){if(r("[handleAxiosError] Processing error from PayPal API"),e.response){r(`[handleAxiosError] Response error status: ${e.response.status}`),r(`[handleAxiosError] Response error headers: ${JSON.stringify(e.response.headers)}`);try{let n=e.response.data;r(`[handleAxiosError] Error data: ${JSON.stringify(n)}`);let i=n.message||"Unknown error";if(n.details&&Array.isArray(n.details)){let a=n.details.map(o=>o.description||"").filter(Boolean).join("; ");a&&(i+=": "+a,r(`[handleAxiosError] Error details: ${a}`))}throw r(`[handleAxiosError] Throwing error with message: PayPal API error (${e.response.status}): ${i}`),new Error(`PayPal API error (${e.response.status}): ${i}`)}catch{throw r("[handleAxiosError] Error parsing response data, using raw data"),r(`[handleAxiosError] Throwing error with message: PayPal API error (${e.response.status}): ${e.response.data}`),new Error(`PayPal API error (${e.response.status}): ${e.response.data}`)}}else throw e.request?(r("[handleAxiosError] No response received from PayPal API"),r(`[handleAxiosError] Request: ${JSON.stringify(e.request)}`),r(`[handleAxiosError] Throwing error with message: PayPal API error: No response received - ${e.message}`),new Error(`PayPal API error: No response received - ${e.message}`)):(r(`[handleAxiosError] Error setting up request: ${e.message}`),r(`[handleAxiosError] Throwing error with message: PayPal API error: ${e.message}`),new Error(`PayPal API error: ${e.message}`))}var b=require("@paypal/paypal-server-sdk"),$=v(require("axios")),le=require("buffer"),O=v(require("os"));var de="1.3.3";var ue=v(require("debug")),pe=(0,ue.default)("agent-toolkit:client"),A=class{_sdkClient;_clientId;_clientSecret;_isSandbox;_accessToken;_baseUrl;_context;constructor({clientId:n,clientSecret:i,context:a,accessToken:o}){this._context=a;let s=this._context.debug??!1;this._clientId=n,this._clientSecret=i,this._isSandbox=this._context?.sandbox??!1,this._accessToken=o,this._clientId!==void 0&&this._clientSecret!==void 0&&this.createSDKClient(this._clientId,this._clientSecret,s),this._baseUrl=this._isSandbox?"https://api.sandbox.paypal.com":"https://api.paypal.com",pe(`[PayPal Setttings] Environment: ${this._isSandbox?"Sandbox":"Live"}`),pe(`[PayPal Setttings] API Base: ${this._baseUrl}`)}createSDKClient(n,i,a){this._sdkClient=new b.Client({clientCredentialsAuthCredentials:{oAuthClientId:n,oAuthClientSecret:i},timeout:0,environment:this._isSandbox?b.Environment.Sandbox:b.Environment.Production,...a&&{logging:{logLevel:b.LogLevel.Info,maskSensitiveHeaders:!0,logRequest:{logBody:!0},logResponse:{logBody:!0,logHeaders:!0}}}})}async getAccessToken(){let n=le.Buffer.from(`${this._clientId}:${this._clientSecret}`).toString("base64"),i=this._baseUrl+"/v1/oauth2/token";try{return(await $.default.post(i,"grant_type=client_credentials",{headers:{Authorization:`Basic ${n}`,"Content-Type":"application/x-www-form-urlencoded","User-Agent":this.generateUserAgent()}})).data.access_token}catch(a){throw $.default.isAxiosError(a)?new Error(`Failed to fetch access token: ${a.response?.data?.error_description||a.message}`):new Error(`Failed to fetch access token: ${a instanceof Error?a.message:String(a)}`)}}getBaseUrl(){return this._baseUrl}async getHeaders(){let n={"Content-Type":"application/json"};return this._accessToken=this._accessToken||await this.getAccessToken(),n.Authorization=`Bearer ${this._accessToken}`,this._context.request_id&&(n["PayPal-Request-Id"]=this._context.request_id),this._context.tenant_context&&(n["PayPal-Tenant-Context"]=JSON.stringify(this._context.tenant_context)),n["User-Agent"]=this.generateUserAgent(),n}generateUserAgent(){return[`PayPal Agent Toolkit Typescript: ${this._context.source}`,`Version: ${de}`,`on OS: ${O.default.platform()} ${O.default.release()}`].filter(Boolean).join(", ")}},I=A;var R=class{paypalClient;context;baseUrl;accessToken;constructor(n,i){this.context=i||{},this.context.sandbox=this.context.sandbox??!1,this.baseUrl=this.context.sandbox?"https://api-m.sandbox.paypal.com":"https://api-m.paypal.com",typeof n=="string"?(this.accessToken=n,this.paypalClient=new I({context:this.context,accessToken:this.accessToken})):this.paypalClient=n}async run(n,i){try{let a=await this.executeMethod(n,i);return JSON.stringify(a)}catch(a){let o=a.message||"Unknown error";return JSON.stringify({error:{message:o,type:"paypal_error"}})}}async executeMethod(n,i){switch(n){case"create_invoice":return H(this.paypalClient,this.context,i);case"list_invoices":return B(this.paypalClient,this.context,i);case"get_invoice":return J(this.paypalClient,this.context,i);case"send_invoice":return w(this.paypalClient,this.context,i);case"send_invoice_reminder":return Q(this.paypalClient,this.context,i);case"cancel_sent_invoice":return z(this.paypalClient,this.context,i);case"generate_invoice_qr_code":return G(this.paypalClient,this.context,i);case"create_product":return M(this.paypalClient,this.context,i);case"list_products":return V(this.paypalClient,this.context,i);case"show_product_details":return Y(this.paypalClient,this.context,i);case"create_subscription_plan":return F(this.paypalClient,this.context,i);case"list_subscription_plans":return K(this.paypalClient,this.context,i);case"show_subscription_plan_details":return W(this.paypalClient,this.context,i);case"create_subscription":return Z(this.paypalClient,this.context,i);case"show_subscription_details":return X(this.paypalClient,this.context,i);case"cancel_subscription":return ee(this.paypalClient,this.context,i);case"create_shipment_tracking":return ie(this.paypalClient,this.context,i);case"get_shipment_tracking":return ne(this.paypalClient,this.context,i);case"create_order":return te(this.paypalClient,this.context,i);case"get_order":return D(this.paypalClient,this.context,i);case"pay_order":return re(this.paypalClient,this.context,i);case"list_disputes":return se(this.paypalClient,this.context,i);case"get_dispute":return oe(this.paypalClient,this.context,i);case"accept_dispute_claim":return ae(this.paypalClient,this.context,i);case"list_transactions":return ce(this.paypalClient,this.context,i);default:throw new Error(`Invalid method: ${n}`)}}},he=R;function me(e,n){for(let i in e.actions)for(let a in e.actions[i])if(n.actions[i]&&n.actions[i][a])return!0;return!1}var ge=e=>`
Create Invoices on PayPal.

This function is used to create an invoice in the PayPal system. It allows you to generate a new invoice, specifying details such as customer information, items, quantities, pricing, and tax information. Once created, an invoice can be sent to the customer for payment.
`,fe=e=>`
List invoices from PayPal.

This function retrieves a list of invoices with optional pagination parameters.
`,ye=e=>`
Get an invoice from PayPal.

This function retrieves details of a specific invoice using its ID.
`,be=e=>`
Send an invoice to the recipient(s).

This function sends a previously created invoice to its intended recipients.
`,Pe=e=>`
Send a reminder for an invoice.

This function sends a reminder for an invoice that has already been sent but hasn't been paid yet.
`,_e=e=>`
Cancel a sent invoice.

This function cancels an invoice that has already been sent to the recipient(s).
`,ve=e=>`
Generate a QR code for an invoice.

This function generates a QR code for an invoice, which can be used to pay the invoice using a mobile device or scanning app.
`,xe=e=>`
Create a product in PayPal using product catalog - create products API.
This function creates a new product that will be used in subscription plans, subscriptions.
Required parameters are: name (product name), type (product type).
High level: 
    - id: (auto-generated or specify SKU of the product) The ID of the product
    - name: {product_name} (required) 
    - description: {product_description} (optional)
    - type {DIGITAL | PHYSICAL | SERVICE} (required)
    - category: {product_category} (optional) 
    - image_url: {image_url} (optional)
    - home_url: {home_url} (optional)

Below is the payload request structure:
{
    "id": "#PROD-XYAB12ABSB7868434",
    "name": "Video Streaming Service",
    "description": "Service for streaming latest series, movies etc.",
    "type": "SERVICE",
    "category": "SOFTWARE",
    "image_url": "https://example.com/streaming.jpg",
    "home_url": "https://example.com/home"
}

`,Se=e=>`
List products from PayPal.

This function retrieves a list of products with optional pagination parameters.
`,Ie=e=>`
List products from PayPal.

This function retrieves a list of products with optional pagination parameters.
`,Te=e=>`
Update a product in PayPal.

This function updates an existing product using JSON Patch operations.
`,Ce=e=>`
Create a subsctiption plan in PayPal using subscription - create plan API.
This function creates a new subscription plan that defines pricing and billing cycle details for subscriptions.
Required parameters are: product_id (the ID of the product for which to create the plan), name (subscription plan name), billing_cycles (billing cycle details).
High level: product_id, name, description, taxes, status: {CREATED|INACTIVE|ACTIVE}, billing_cycles, payment_preferences are required in json object.
While creating billing_cycles object, trial(second) billing cycle should precede regular billing cycle.
`,we=e=>`
List subscription plans from PayPal.

This function retrieves a list of subscription plans with optional product filtering and pagination parameters.
`,De=e=>`
Show subscription plan details from PayPal.
This function retrieves the details of a specific subscription plan using its ID.
Required parameters are: plan_id (the ID of the subscription plan).
`,$e=e=>`
Create a subscription in PayPal using the subscription - create subscription API.
This function allows you to create a new subscription for a specific plan, enabling the management of recurring payments.
The only required parameter is plan_id (the ID of the subscription plan). All other fields are optional and can be omitted if not provided.
The subscriber field is optional. If no subscriber information is provided, omit the subscriber field in the request payload.
The shipping address is optional. If no shipping address is provided, set the shipping_preference to GET_FROM_FILE in the application context.
The application context is also optional. If no application context information is provided, omit the application context field in the request payload.
`,Oe=e=>`
Show subscription details from PayPal.
This function retrieves the details of a specific subscription using its ID.
Required parameters are: subscription_id (the ID of the subscription).
`,Ae=e=>`
Cancel a customer subscription in PayPal.

This function cancels an active subscription for a customer. It requires the subscription ID and an optional reason for cancellation.
Required parameters are: subscription_id (the ID of the subscription to be canceled).
Below is the payload request structure:
{
    "reason": "Customer requested cancellation"
}
You MUST ask the user for: 
 - subscription_id
 - reason for cancellation.

Return all of the above as structured JSON in your response.
`,Re=e=>`
Create a shipment for a transaction in PayPal.
This function creates a shipment record for a specific transaction, allowing you to track the shipment status and details.
The transaction_id can fetch from the captured payment details in the order information.
Required parameters are: tracking_number (the tracking number for the shipment), transaction_id (the transaction ID associated with the shipment). 
High level: tracking_number, transaction_id, status (optional), carrier (optional) are required json objects.
Below is the payload request structure:
{
    "tracking_number": "1234567890",
    "transaction_id": "9XJ12345ABC67890",
    "status": "SHIPPED", // Required: ON_HOLD, SHIPPED, DELIVERED, CANCELLED
    "carrier": "UPS" // Required: The carrier handling the shipment. Link to supported carriers: http://developer.paypal.com/docs/tracking/reference/carriers/
}
`,Ee=e=>`
Get tracking information for a shipment by ID.
This function retrieves tracking information for a specific shipment using the transaction ID and tracking number.
The transaction_id can fetch from the captured payment details in the order information.
Below is the payload request structure:
`,ke=e=>`
Create an order in PayPal.

This tool is used to create a new order in PayPal. This is typically the first step in initiating a payment flow. It sets up an order with specified details such as item(s) to be purchased, quantity, amount, currency, and other details.
`,Ue=e=>`
Retrieves the order details from PayPal for a given order ID.

This tool is used to retrieve details of an existing order in PayPal. It provides information about the order, including items, amounts, status, and other relevant details.
`,qe=e=>`
Capture a payment for an order.

This tool is used to capture a payment for an order. It allows you to capture funds that have been authorized for a specific order but not yet captured.
`,je=e=>`
List disputes from PayPal.

This function retrieves a list of disputes with optional pagination and filtering parameters.
`,Ne=e=>`
Get details for a specific dispute from PayPal.

This tool is used to lists disputes with a summary set of details, which shows the dispute_id, reason, status, dispute_state, dispute_life_cycle_stage, dispute_channel, dispute_amount, create_time and update_time fields.
`,Le=e=>`
Accept liability for a dispute claim.

This tool is used to accept liability for a dispute claim. When you accept liability for a dispute claim, the dispute closes in the customer's favor and PayPal automatically refunds money to the customer from the merchant's account.
`,He=e=>`
List transactions from PayPal.

This tool is used to list transactions with optional filtering parameters within a date range of 31 days. This tool can also be used to list details of a transaction given the transaction ID.

- The start_date and end_date should be specified in ISO8601 date and time format. Example dates: 1996-12-19T16:39:57-08:00, 1985-04-12T23:20:50.52Z, 1990-12-31T23:59:60Z
- The transaction_status accepts the following 4 values:
    1. "D" - represents denied transactions.
    2. "P" - represents pending transactions.
    3. "S" - represents successful transactions.
    4. "V" - represents transactions that were reversed.
- The transaction_id is the unique identifier for the transaction.
`;var t=require("zod"),Ct=t.z.object({name:t.z.string().describe("The name of the item"),quantity:t.z.string().describe("The quantity of the item that the invoicer provides to the payer. Value is from -1000000 to 1000000. Supports up to five decimal places. Cast to string"),unit_amount:t.z.object({currency_code:t.z.string().describe("Currency code of the unit amount"),value:t.z.string().describe("The unit price. Up to 2 decimal points")}).describe("unit amount object"),tax:t.z.object({name:t.z.string().optional().describe("Tax name"),percent:t.z.string().optional().describe("Tax Percent")}).optional().describe("tax object"),unit_of_measure:t.z.enum(["QUANTITY","HOURS","AMOUNT"]).optional().describe("The unit of measure for the invoiced item")}).describe("invoice line item object"),Be=e=>t.z.object({detail:t.z.object({invoice_date:t.z.string().optional().describe("The invoice date in YYYY-MM-DD format"),currency_code:t.z.string().describe("currency code of the invoice")}).describe("The invoice detail"),invoicer:t.z.object({business_name:t.z.string().max(300).describe("business name of the invoicer"),name:t.z.object({given_name:t.z.string().optional().describe("given name of the invoicer"),surname:t.z.string().optional().describe("surname of the invoicer")}).optional().describe("name of the invoicer"),email_address:t.z.string().optional().describe("email address of the invoicer")}).optional().describe("The invoicer business information that appears on the invoice."),primary_recipients:t.z.array(t.z.object({billing_info:t.z.object({name:t.z.object({given_name:t.z.string().optional().describe("given name of the recipient"),surname:t.z.string().optional().describe("surname of the recipient")}).optional().describe("name of the recipient"),email_address:t.z.string().describe("email address of the recipient").optional()}).describe("The billing information of the invoice recipient").optional()})).describe("array of recipients").optional(),items:t.z.array(Ct).describe("Array of invoice line items").optional()}).describe("create invoice request payload"),Je=e=>t.z.object({invoice_id:t.z.string().describe("The ID of the invoice to retrieve.")}),Qe=e=>t.z.object({page:t.z.number().default(1).optional().describe("The page number of the result set to fetch.").default(1),page_size:t.z.number().min(1).max(100).default(100).optional().describe("The number of records to return per page (maximum 100)."),total_required:t.z.boolean().optional().describe("Indicates whether the response should include the total count of items.")}),ze=e=>t.z.object({invoice_id:t.z.string().describe("The ID of the invoice to send."),note:t.z.string().optional().describe("A note to the recipient."),send_to_recipient:t.z.boolean().optional().describe("Indicates whether to send the invoice to the recipient."),additional_recipients:t.z.array(t.z.string()).optional().describe("Additional email addresses to which to send the invoice.")}),Ge=e=>t.z.object({invoice_id:t.z.string().describe("The ID of the invoice for which to send a reminder."),subject:t.z.string().optional().describe("The subject of the reminder email."),note:t.z.string().optional().describe("A note to the recipient."),additional_recipients:t.z.array(t.z.string()).optional().describe("Additional email addresses to which to send the reminder.")}),Me=e=>t.z.object({invoice_id:t.z.string().describe("The ID of the invoice to cancel."),note:t.z.string().optional().describe("A cancellation note to the recipient."),send_to_recipient:t.z.boolean().optional().describe("Indicates whether to send the cancellation to the recipient."),additional_recipients:t.z.array(t.z.string()).optional().describe("Additional email addresses to which to send the cancellation.")}),Ve=e=>t.z.object({invoice_id:t.z.string().describe("The invoice id to generate QR code for"),width:t.z.number().default(300).describe("The QR code width"),height:t.z.number().default(300).describe("The QR code height")}).describe("generate invoice qr code request payload"),Ye=e=>t.z.object({product_id:t.z.string().describe("The ID of the product to update."),operations:t.z.array(t.z.object({}).passthrough()).describe("The PATCH operations to perform on the product.")}),Fe=e=>t.z.object({order_id:t.z.string().describe("The ID of the order for which to create a shipment").optional(),tracking_number:t.z.string().describe("The tracking number for the shipment. Id is provided by the shipper. This is required to create a shipment."),transaction_id:t.z.string().describe("The transaction ID associated with the shipment. Transaction id available after the order is paid or captured. This is required to create a shipment."),status:t.z.string().optional().describe('The status of the shipment. It can be "ON_HOLD", "SHIPPED", "DELIVERED", or "CANCELLED".').default("SHIPPED"),carrier:t.z.string().optional().describe("The carrier handling the shipment.")}),Ke=e=>t.z.object({order_id:t.z.string().describe("The ID of the order for which to create a shipment.").optional(),transaction_id:t.z.string().describe("The transaction ID associated with the shipment tracking to retrieve.").optional()}),wt=t.z.object({itemCost:t.z.number().describe("The cost of each item - upto 2 decimal points."),taxPercent:t.z.number().describe("The tax percent for the specific item.").default(0),itemTotal:t.z.number().describe("The total cost of this line item.")}),Dt=t.z.object({name:t.z.string().describe("The name of the item."),quantity:t.z.number().describe("The item quantity. Must be a whole number.").default(1),description:t.z.string().describe("The detailed item description.").optional()}).merge(wt),$t=t.z.object({address_line_1:t.z.string().describe("The first line of the address, such as number and street, for example, `173 Drury Lane`.This field needs to pass the full address.").optional(),address_line_2:t.z.string().describe("The second line of the address, for example, a suite or apartment number.").optional(),admin_area_2:t.z.string().describe("A city, town, or village. Smaller than `admin_area_level_1`.").optional(),admin_area_1:t.z.string().describe("The highest-level sub-division in a country, which is usually a province, state, or ISO-3166-2 subdivision. ").optional(),postal_code:t.z.string().describe("The postal code, which is the ZIP code or equivalent. Typically required for countries with a postal code or an equivalent.").optional(),country_code:t.z.string().describe("The 2-character ISO 3166-1 code that identifies the country or region. Note: The country code for Great Britain is `GB` and not `UK` as used in the top-level domain names for that country.").length(2).optional()}).describe("The shipping address for the order."),T=e=>t.z.object({currencyCode:t.z.enum(["USD"]).describe("Currency code of the amount."),items:t.z.array(t.z.lazy(()=>Dt)).max(50),discount:t.z.number().describe("The discount amount for the order.").default(0).optional(),shippingCost:t.z.number().describe("The cost of shipping for the order.").default(0).optional(),shippingAddress:t.z.optional($t.nullable()).default(null).describe("The shipping address for the order."),notes:t.z.string().optional().nullable().default(null),returnUrl:t.z.string().optional().default("https://example.com/returnUrl"),cancelUrl:t.z.string().optional().default("https://example.com/cancelUrl")}),We=e=>t.z.object({id:t.z.string().describe("The order id generated during create call")}),Ze=e=>t.z.object({id:t.z.string().describe("The order id generated during create call")}),Xe=e=>t.z.object({disputed_transaction_id:t.z.string().nullable().default(null),dispute_state:t.z.enum(["REQUIRED_ACTION","REQUIRED_OTHER_PARTY_ACTION","UNDER_PAYPAL_REVIEW","RESOLVED","OPEN_INQUIRIES","APPEALABLE"]).optional().describe("OPEN_INQUIRIES"),page_size:t.z.number().default(10).optional(),page:t.z.number().default(1).optional()}),et=e=>t.z.object({dispute_id:t.z.string().describe("The order id generated during create call")}),tt=e=>t.z.object({dispute_id:t.z.string(),note:t.z.string().describe("A note about why the seller is accepting the claim")}),rt=e=>t.z.object({transaction_id:t.z.string().optional().describe("The ID of the transaction to retrieve.").nullable().default(null),transaction_status:t.z.enum(["D","P","S","V"]).optional().default("S"),start_date:t.z.string().describe("Filters the transactions in the response by a start date and time, in ISO8601 date and time format. Seconds are required. Fractional seconds are optional.").optional().default(()=>{let n=new Date;return n.setDate(n.getDate()-31),n.toISOString()}),end_date:t.z.string().describe("Filters the transactions in the response by an end date and time, in ISO8601 date and time format. Seconds are required. Fractional seconds are optional. The maximum supported range is 31 days.").optional().default(()=>{let n=new Date;return n.setDate(n.getDate()),n.toISOString()}),search_months:t.z.number().optional().describe("Number of months to search back for a transaction by ID. Default is 12 months.").default(12),page_size:t.z.number().default(100).optional(),page:t.z.number().default(1).optional()}),it=e=>t.z.object({name:t.z.string().describe("The product name."),type:t.z.enum(["PHYSICAL","DIGITAL","SERVICE"]).describe("The product type. Value is PHYSICAL, DIGITAL, or SERVICE."),description:t.z.string().optional().describe("The product description."),category:t.z.string().optional().describe("The product category."),image_url:t.z.string().optional().describe("The image URL for the product."),home_url:t.z.string().optional().describe("The home page URL for the product.")}),nt=e=>t.z.object({page:t.z.number().optional().describe("The page number of the result set to fetch."),page_size:t.z.number().optional().describe("The number of records to return per page (maximum 100)."),total_required:t.z.boolean().optional().describe("Indicates whether the response should include the total count of products.")}),st=e=>t.z.object({product_id:t.z.string().describe("The ID of the product to update.")}),Ot=t.z.object({interval_unit:t.z.enum(["DAY","WEEK","MONTH","YEAR"]).describe("The unit of time for the billing cycle."),interval_count:t.z.number().describe("The number of units for the billing cycle.")}).passthrough(),At=t.z.object({fixed_price:t.z.object({currency_code:t.z.enum(["USD"]).describe("The currency code for the fixed price."),value:t.z.string().describe("The value of the fixed price.")}).passthrough().optional().describe("The fixed price for the subscription plan."),version:t.z.string().optional().describe("The version of the pricing scheme.")}).passthrough(),Rt=t.z.object({frequency:Ot.describe("The frequency of the billing cycle."),tenure_type:t.z.enum(["REGULAR","TRIAL"]).describe("The type of billing cycle tenure."),sequence:t.z.number().describe("The sequence of the billing cycle."),total_cycles:t.z.number().optional().describe("The total number of cycles in the billing plan."),pricing_scheme:At.describe("The pricing scheme for the billing cycle.")}).passthrough(),Et=t.z.object({currency_code:t.z.enum(["USD"]).optional().describe("The currency code for the setup fee."),value:t.z.string().optional().describe("The value of the setup fee.")}).passthrough().optional(),kt=t.z.object({auto_bill_outstanding:t.z.boolean().optional().describe("Indicates whether to automatically bill outstanding amounts."),setup_fee:Et.describe("The setup fee for the subscription plan."),setup_fee_failure_action:t.z.enum(["CONTINUE","CANCEL"]).optional().describe("The action to take if the setup fee payment fails."),payment_failure_threshold:t.z.number().optional().describe("The number of failed payments before the subscription is canceled.")}).passthrough().optional(),Ut=t.z.object({percentage:t.z.string().optional().describe("The tax percentage."),inclusive:t.z.boolean().optional().describe("Indicates whether the tax is inclusive.")}).passthrough().optional(),ot=e=>t.z.object({product_id:t.z.string().describe("The ID of the product for which to create the plan."),name:t.z.string().describe("The subscription plan name."),description:t.z.string().optional().describe("The subscription plan description."),billing_cycles:t.z.array(Rt).describe("The billing cycles of the plan."),payment_preferences:kt.describe("The payment preferences for the subscription plan."),taxes:Ut.describe("The tax details.")}),at=e=>t.z.object({product_id:t.z.string().optional().describe("The ID of the product for which to get subscription plans."),page:t.z.number().optional().describe("The page number of the result set to fetch."),page_size:t.z.number().optional().describe("The number of records to return per page (maximum 100)."),total_required:t.z.boolean().optional().describe("Indicates whether the response should include the total count of plans.")}),ct=e=>t.z.object({plan_id:t.z.string().describe("The ID of the subscription plan to show.")}),dt=t.z.object({given_name:t.z.string().optional().describe("The subscriber given name."),surname:t.z.string().optional().describe("The subscriber last name.")}).optional().describe("The subscriber name."),qt=t.z.object({address_line_1:t.z.string().describe("The first line of the address."),address_line_2:t.z.string().optional().describe("The second line of the address."),admin_area_1:t.z.string().describe("The city or locality."),admin_area_2:t.z.string().describe("The state or province."),postal_code:t.z.string().describe("The postal code."),country_code:t.z.enum(["US"]).describe("The country code.")}).optional().describe("The shipping address."),jt=t.z.object({name:dt.describe("The subscriber shipping address name."),address:qt}).optional().describe("The subscriber shipping address."),Nt=t.z.object({payer_selected:t.z.enum(["PAYPAL","CREDIT_CARD"]).describe("The payment method selected by the payer."),payee_preferred:t.z.enum(["IMMEDIATE_PAYMENT_REQUIRED","INSTANT_FUNDING_SOURCE"]).optional().describe("The preferred payment method for the payee.")}).optional().describe("The payment method details."),Lt=t.z.object({currency_code:t.z.enum(["USD"]).describe("The currency code for the shipping amount."),value:t.z.string().describe("The value of the shipping amount.")}).optional().describe("The shipping amount for the subscription."),Ht=t.z.object({name:dt,email_address:t.z.string().optional().describe("The subscriber email address."),shipping_address:jt}).optional().describe("The subscriber details."),Bt=t.z.object({brand_name:t.z.string().describe("The brand name."),locale:t.z.string().optional().describe("The locale for the subscription."),shipping_preference:t.z.enum(["SET_PROVIDED_ADDRESS","GET_FROM_FILE"]).optional().describe("The shipping preference."),user_action:t.z.enum(["SUBSCRIBE_NOW","CONTINUE"]).optional().describe("The user action."),return_url:t.z.string().describe("The return URL after the subscription is created."),cancel_url:t.z.string().describe("The cancel URL if the user cancels the subscription."),payment_method:Nt}).optional().describe("The application context for the subscription."),pt=e=>t.z.object({plan_id:t.z.string().describe("The ID of the subscription plan to create."),quantity:t.z.number().optional().describe("The quantity of the product in the subscription."),shipping_amount:Lt,subscriber:Ht,application_context:Bt}),lt=e=>t.z.object({subscription_id:t.z.string().describe("The ID of the subscription to show details.")}),ut=e=>t.z.object({subscription_id:t.z.string().describe("The ID of the subscription to show details."),payload:t.z.object({reason:t.z.string().describe("The reason for the cancellation of a subscription.")}).passthrough().describe("Payload for subscription cancellation.")});var ht=e=>[{method:"create_invoice",name:"Create Invoice",description:ge(e),parameters:Be(e),actions:{invoices:{create:!0}}},{method:"list_invoices",name:"List Invoices",description:fe(e),parameters:Qe(e),actions:{invoices:{list:!0}}},{method:"get_invoice",name:"Get Invoice",description:ye(e),parameters:Je(e),actions:{invoices:{get:!0}}},{method:"send_invoice",name:"Send Invoice",description:be(e),parameters:ze(e),actions:{invoices:{send:!0}}},{method:"send_invoice_reminder",name:"Send Invoice Reminder",description:Pe(e),parameters:Ge(e),actions:{invoices:{sendReminder:!0}}},{method:"cancel_sent_invoice",name:"Cancel Sent Invoice",description:_e(e),parameters:Me(e),actions:{invoices:{cancel:!0}}},{method:"generate_invoice_qr_code",name:"Generate Invoice QR Code",description:ve(e),parameters:Ve(e),actions:{invoices:{generateQRC:!0}}},{method:"create_product",name:"Create Product",description:xe(e),parameters:it(e),actions:{products:{create:!0}}},{method:"list_products",name:"List Products",description:Se(e),parameters:nt(e),actions:{products:{list:!0}}},{method:"update_product",name:"Update Product",description:Te(e),parameters:Ye(e),actions:{products:{update:!0}}},{method:"show_product_details",name:"Show Products Details",description:Ie(e),parameters:st(e),actions:{products:{show:!0}}},{method:"create_subscription_plan",name:"Create Subscription Plan",description:Ce(e),parameters:ot(e),actions:{subscriptionPlans:{create:!0}}},{method:"list_subscription_plans",name:"List Subscription Plans",description:we(e),parameters:at(e),actions:{subscriptionPlans:{list:!0}}},{method:"show_subscription_plan_details",name:"Show Subscription Plan Details",description:De(e),parameters:ct(e),actions:{subscriptionPlans:{show:!0}}},{method:"create_subscription",name:"Create Subscription",description:$e(e),parameters:pt(e),actions:{subscriptions:{create:!0}}},{method:"show_subscription_details",name:"Show Subscription Details",description:Oe(e),parameters:lt(e),actions:{subscriptions:{show:!0}}},{method:"cancel_subscription",name:"Cancel Subscription",description:Ae(e),parameters:ut(e),actions:{subscriptions:{cancel:!0}}},{method:"create_shipment_tracking",name:"Create shipment",description:Re(e),parameters:Fe(e),actions:{shipment:{create:!0}}},{method:"get_shipment_tracking",name:"Get Shipment Tracking",description:Ee(e),parameters:Ke(e),actions:{shipment:{get:!0}}},{method:"create_order",name:"Create Order",description:ke(e),parameters:T(e),actions:{orders:{create:!0}}},{method:"get_order",name:"Get Order",description:Ue(e),parameters:We(e),actions:{orders:{get:!0}}},{method:"pay_order",name:"Process payment for an authorized order",description:qe(e),parameters:Ze(e),actions:{orders:{capture:!0}}},{method:"list_disputes",name:"List Disputes",description:je(e),parameters:Xe(e),actions:{disputes:{list:!0}}},{method:"get_dispute",name:"Get Dispute",description:Ne(e),parameters:et(e),actions:{disputes:{get:!0}}},{method:"accept_dispute_claim",name:"Accept dispute claim",description:Le(e),parameters:tt(e),actions:{disputes:{create:!0}}},{method:"list_transactions",name:"List Transactions",description:He(e),parameters:rt(e),actions:{transactions:{list:!0}}}],Jt=ht({}).reduce((e,n)=>(Object.keys(n.actions).forEach(i=>{e[i]={...e[i],...n.actions[i]}}),e),{}),mt=Jt,gt=ht;var ft=require("ai");function E(e,n,i,a){return(0,ft.tool)({description:i,parameters:a,execute:o=>e.run(n,o)})}var Qt="AI-SDK",k=class{client;_paypal;_tools;constructor({clientId:n,clientSecret:i,configuration:a}){let o=a.context||{};this.client=new I({clientId:n,clientSecret:i,context:{...o,source:Qt}});let s=gt(o).filter(c=>me(c,a));this._paypal=new he(this.client,a.context),this._tools=s.reduce((c,d)=>(c[d.method]=E(this._paypal,d.method,d.description,d.parameters),c),{})}getTools(){return this._tools}},C=k;var f=require("ai");var U=class{toolkit;log;constructor({clientId:n,clientSecret:i,configuration:a,log:o}){this.log=o||console.log,this.toolkit=new C({clientId:n,clientSecret:i,configuration:a})}async generateOrder(n,i,a){this.log("Step 1: I am using the provided prompts to create a request object for PayPal.");let{object:o}=await(0,f.generateObject)({model:n,schema:T({}),system:a,prompt:i});this.log(`Response 1: I have now created the request object with provided details;
 ${JSON.stringify(o)}`),this.log("Proceeding with next step."),this.log("Step 2: I am now choosing the correct tool from PayPal's toolkit to create an an order using the generated object from previous step.");let{text:s}=await(0,f.generateText)({model:n,tools:this.toolkit.getTools(),maxSteps:10,prompt:`Create an order using the following details: ${JSON.stringify(o,null,2)}`});this.log(`Response 2: I have created the order in PayPal's system with order ID: ${s}.`),this.log("Proceeding with next step."),this.log("Step 3: I am now choosing the correct tool from PayPal's toolkit to retrieve the order details with the order ID from previous step.");let{text:c}=await(0,f.generateText)({model:n,tools:this.toolkit.getTools(),maxSteps:10,system:"You are processing an order using PayPal APIs. Use the order ID to retrieve the order details.",prompt:`Retrieve the details of the order with ID: ${s}.`});this.log(`Response 3: Here is the order details with ID: ${s}; ${JSON.stringify(c,null,2)}`),this.log("Proceeding with next step."),this.log("Step 4: I am now generating the summary of the order using the order details retrieved in the previous step. This makes it easier to read the important information.");let{text:d}=await(0,f.generateText)({model:n,maxSteps:10,system:"You are tasked with generating an summary text for the order. Use the provided order details. For each item in order, update item level tax to be the tax amount*quantity of the item. Show the payment approval link only at the end of the page for the customer and hide all other links related to the order.",prompt:`
                Generate a summary for the following order details: ${c}.
            `});return this.log(`Response 4: 
${d}`),d}async getDisputeDetails(n,i){this.log("Step 1. I am now retrieving the details from PayPal.");let{text:a}=await(0,f.generateText)({model:n,tools:this.toolkit.getTools(),maxSteps:10,system:"You are a tool to retrieve the dispute details based on the dispute ID.",prompt:i});this.log("Step 2. I am now generating the summary of the dispute using the dispute details retrieved in the previous step. This makes it easier to read the important information.");let{text:o}=await(0,f.generateText)({model:n,tools:this.toolkit.getTools(),system:"You are tasked with generating an summary text for the dispute. Use the provided dispute details. Show the appropriate links only at the end of the page.",prompt:`
                Generate a summary for the following dispute details: ${a}.
            `});return this.log(`Output: ${o}`),o}},yt=U;0&&(module.exports={ALL_TOOLS_ENABLED,PayPalAgentToolkit,PayPalWorkflows});
